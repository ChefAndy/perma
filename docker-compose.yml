version: '2'

services:
  #
  # Perma
  #
  rabbitmq:
    image: rabbitmq:3.7.2
    volumes:
      - rabbitmq_home:/var/lib/rabbitmq:delegated
    networks:
      - default

  # TO USE REDIS: add the caches setting found in settings_prod to your settings.py
  # redis:
  #   image: redis:4.0.6
  #   volumes:
  #     - redis_data:/data:delegated
  db:
    image: mysql:5.6
    environment:
        MYSQL_ROOT_PASSWORD: password
    volumes:
      # NAMED VOLUMES
      # If the volume contains a database (a subdirectory named mysql)
      # when you start the container, it will be left untouched and unaffected
      # by config environment variables like $MYSQL_ROOT_PASSWORD.
      - db3_data:/var/lib/mysql:delegated
      # BIND MOUNTS
      - ./services/mysql/conf.d:/etc/mysql/conf.d
    networks:
      - default
  web:
    build: ./perma_web
    image: perma3:0.11
    tty: true
    command: bash
    # Some people prefer the below ;-)
    # command: pipenv run fab run
    volumes:
      # NAMED VOLUMES
      # Use a named, persistent volume so that the node_modules directory,
      # which is created during the image's build process, and which our
      # code presently expects to be nested inside the perma_web directory,
      # isn't wiped out when mounting our code in ./perma_web code to
      # the container. We can consider restructuring the project instead.
      - node_modules:/perma/perma_web/node_modules
      # BIND MOUNTS
      - ./perma_web:/perma/perma_web
      - ./services/celery:/perma/services/celery
      - ./services/cloudflare:/perma/services/cloudflare
      - ./services/django:/perma/services/django:delegated
      - ./services/logs:/perma/services/logs:delegated
    environment:
      # Temporary: let Django load Docker-specific settings conditionally
      - DOCKERIZED=True
    extra_hosts:
      - "perma.test:127.0.0.1"
      - "api.perma.test:127.0.0.1"
      - "perma-archives.test:127.0.0.1"
    ports:
      - "8000:8000"
    depends_on:
      - db
    networks:
      - default
      # TO CONNECT TO A SEPARATELY-RUNNING WEBRECORDER INSTANCE:
      # start the WR containers first, then uncomment and start Perma's containers
      # - webrecorder

  #
  # Perma Payments
  #
  pp_db:
    image: postgres:9.6.2
    volumes:
      - pp_db_data:/var/lib/postgresql/data:delegated
    networks:
      - perma_payments

  perma-payments:
    image: harvardlil/perma-payments:0.95
    # hack: sleep to give the database time to start up
    command: >
      sh -c "sleep 5 && pipenv run ./manage.py migrate &&
             pipenv run fab run"
    ports:
      - "80:80"
    depends_on:
      - pp_db
    environment:
      - DJANGO__DATABASES__default__HOST=pp_db
    # TO CUSTOMIZE CONFIG:
    # copy ./services/docker/perma-payments/settings.py.example
    # to ./services/docker/perma-payments/settings.py,
    # alter config as desired, in the usual way, then comment in this volume
    # and re-run docker-compose up
    # volumes:
    #   - ./services/docker/perma-payments/settings.py:/perma-payments/config/settings/settings.py
    networks:
      - default
      - perma_payments

networks:
  default:
  perma_payments:

volumes:
  node_modules:
  db3_data:
  rabbitmq_home:
  # redis_data:
  pp_db_data:

networks:
  default:
  perma_payments:
  # webrecorder:
  #   external:
  #     name: webrecorder_default
